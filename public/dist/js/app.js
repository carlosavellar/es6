"use strict";var _createClass=function(){function r(a,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(a,r.key,r)}}return function(a,e,t){return e&&r(a.prototype,e),t&&r(a,t),a}}();function _classCallCheck(a,e){if(!(a instanceof e))throw new TypeError("Cannot call a class as a function")}var Park=function(){function c(a,e,t,r,i,n,s){_classCallCheck(this,c),this.name=a,this.builtYear=e,this.areaWidth=t,this.areaheight=r,this.age=i,this.area=n,this.density=s}return _createClass(c,[{key:"calcArea",value:function(){this.area=this.areaWidth*this.areaheight}},{key:"treeDentsity",value:function(a){this.density=this.area/a}},{key:"calcAge",value:function(){return(new Date).getFullYear()-this.builtYear}},{key:"averageAges",value:function(){[].push(this.age)}}]),c}(),macartur=new Park("MacArtur",1967,2e3,1500),lisa=new Park("Lisa Park",1979,1250,1200);console.log(lisa.calcArea()+",  "+lisa.name+", "+lisa.treeDentsity()+", "+lisa.calcAge()+", "+lisa.ages),console.log(macartur.calcArea()+",  "+macartur.name+", "+macartur.treeDentsity()+", "+macartur.calcAge()+", "+macartur.averageAges());
//# sourceMappingURL=data:application/json;base64,
