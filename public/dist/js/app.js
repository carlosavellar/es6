"use strict";function _classCallCheck(r,t){if(!(r instanceof t))throw new TypeError("Cannot call a class as a function")}var box={color:"red",color2:"blue",clickMe:function(){}};box.clickMe();var Person=function r(t){_classCallCheck(this,r),this.name=t},lines=document.querySelectorAll(".p-3"),linesArr=Array.from(lines),_iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _step,_iterator=linesArr[Symbol.iterator]();!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var curr=_step.value;if("blue-blox"===curr[i].className){linesArr[i].textContent="Celtas";break}linesArr[i].style.backgroundColor="red",linesArr[i].textContent="Celtas"}}catch(r){_didIteratorError=!0,_iteratorError=r}finally{try{!_iteratorNormalCompletion&&_iterator.return&&_iterator.return()}finally{if(_didIteratorError)throw _iteratorError}}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJib3giLCJjb2xvciIsImNvbG9yMiIsImNsaWNrTWUiLCJQZXJzb24iLCJuYW1lIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsImxpbmVzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGluZXNBcnIiLCJBcnJheSIsImZyb20iLCJfc3RlcCIsIl9pdGVyYXRvciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIm5leHQiLCJkb25lIiwiY3VyciIsInZhbHVlIiwiaSIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwidGV4dENvbnRlbnQiXSwibWFwcGluZ3MiOiJ5SEF3QkEsSUFBTUEsSUFBTSxDQUNSQyxNQUFPLE1BSFhDLE9BQUEsT0FDQUMsUUFBQSxjQU9RSCxJQUFBRyxjQUlKQSxPQUtBLFNBQUFDLEVBQVlDLEdBQU1DLGdCQUFBQyxLQUFBSCxHQUZ0QkcsS0FBQUYsS0FBQUEsR0FpRUFHLE1BQUFDLFNBQUFDLGlCQUFBLFFBRU1DLFNBQVdDLE1BQU1DLEtBQUtMLG1GQUM1QixJQUFBLElBQUFNLE1BQUFDLFVBQWtCSixTQUFsQkssT0FBQUMsY0FBQUMsMkJBQUFKLE1BQUFDLFVBQUFJLFFBQUFDLE1BQUFGLDJCQUFBLEVBQTJCLENBQUEsSUFBakJHLEtBQWlCUCxNQUFBUSxNQUZyQmQsR0FBaUJFLGNBQWpCRixLQUFRQyxHQUFBQSxVQUEwQixDQUNsQ0UsU0FBV0MsR0FBQUEsWUFBakIsU0FJUSxNQUVKRCxTQUFTWSxHQUFHQyxNQUFNQyxnQkFBa0IsTUFDcENkLFNBQVNZLEdBQUdHLFlBQWMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbGV0IHJlc3VsdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZXN1bHQnKTtcbi8vIGxldCBzdHJNZXRob2RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zdHJpbmdzMlwiKTtcbi8vIGNvbnN0IHRoaXNXb3JkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50aGlzV29yZFwiKTtcbi8vIGNvbnN0IGFycmF5MSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYXJyYXkxXCIpO1xuLy8gbGV0IGZpc3J0bmFtZSA9IFwiQ2FybG9zXCI7XG4vLyBsZXQgbGFzdG5hbWUgPSBcIk1hcnhcIjtcbi8vIGNvbnN0IHllYXJPZkJpcnRoID0gMTk3ODtcblxuLy8gIFsgKyBdIFsgKyBdIFsgKyBdIFsgKyBdIFRlbXBsYXRlIHN0cmluZ3Ncbi8vIGZ1bmN0aW9uIGNhbGNBZ2UoeWVhcikge1xuLy8gICAgIHJldHVybiAyMDE2IC0geWVhcjtcbi8vIH1cbi8vIHJlc3VsdC5pbm5lckhUTUwgPSBgJHtjYWxjQWdlKHllYXJPZkJpcnRoKX1gO1xuXG4vLyAvLyBTdHJpbmcgbWV0aG9kc1xuXG4vLyBjb25zdCBuID0gYCR7ZmlzcnRuYW1lfSAke2xhc3RuYW1lfWA7XG4vLyBzdHJNZXRob2RzLmlubmVySFRNTCA9IG4uc3RhcnRzV2l0aCgnd2UnKTtcbi8vIHN0ck1ldGhvZHMuaW5uZXJIVE1MICs9IG4uZW5kc1dpdGgoJ0NhcicpO1xuLy8gc3RyTWV0aG9kcy5pbm5lckhUTUwgKz0gbi5pbmNsdWRlcygnYScpO1xuXG5cbi8vICBbICsgXSBbICsgXSBbICsgXSBbICsgXSBcbi8vIFRoaXMgd29yZFxuY29uc3QgYm94ID0ge1xuICAgIGNvbG9yOiAncmVkJyxcbiAgICBjb2xvcjI6ICdibHVlJyxcbiAgICBjbGlja01lOiAoKSA9PiB7XG4gICAgICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnRuLWRhbmdlclwiKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgLy8gICAgIC8vIHRoaXNXb3JkLmlubmVySFRNTCA9ICcnYCR7dGhpcy5jb2xvcn0gYW5kICR7dGhpcy5jb2xvcjJ9YCcnO1xuICAgICAgICAvLyAgICAgdGhpc1dvcmQuaW5uZXJIVE1MID0gdGhpcy5jb2xvcjsgLy9kb2Vzbid0IHNob3cgc2hvdyB0aGUgYm94LmNvbG9yIHByb3BlcnR5IGJ1Y291c2UgVGhpcyBpbnNpZGUgYXJvb3J3IGZ1bmN0aW9ucyBwb2ludCB0byB0aGUgR2xvYmFsIG9ic1xuICAgICAgICAvLyB9KTtcbiAgICB9XG59O1xuYm94LmNsaWNrTWUoKTtcblxuXG4vLyAgWyArIF0gWyArIF0gWyArIF0gWyArIF0gIEFycmF5IGV4ZW1wbGVcbmNsYXNzIFBlcnNvbiB7XG4gICAgY29uc3RydWN0b3IobmFtZSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cbn1cblxuXG4vLyA+Pj4+Pj4+IFsgKyBdIFsgKyBdIFsgKyBdIFsgKyBdIFNlY3Rpb24gMDcgLSAxMDkgLSBEZXN0cnVjdHVyaW5nIEFycmF5XG4vLyBjb25zdCBbIG15bmFtZSwgbXlhZ2VdID0gWydqb3PDqSBDYXJsb3MgRGVzdHInLCAxMl07XG4vLyBjb25zb2xlLmxvZyhteW5hbWUpO1xuXG5cblxuLy8gIFsgKyBdIFsgKyBdIFsgKyBdIFsgKyBdIFNlY3Rpb24gMDcgLSAxMDkgLSBEZXN0cnVjdHVyaW5nIE9ialxuLy8gY29uc3QgYmVsb25naW5nPXtcbi8vICAgICBob3VzZTogJ01pY2hpZ2FuJyxcbi8vICAgICBjYXI6ICdCZW50bGV5J1xuLy8gfTtcbi8vIGNvbnN0IHsgaG91c2UsIGNhciB9ID0gYmVsb25naW5nO1xuLy8gY29uc29sZS5sb2coaG91c2UgKyAgJyAgJyArIGNhciApO1xuXG5cblxuLy8gIFsgKyBdIFsgKyBdIFsgKyBdIFsgKyBdIFNlY3Rpb24gMDcgLSAxMDkgLSBEZXN0cnVjdHVyaW5nIGZ1bmN0aW9uXG4vLyBmdW5jdGlvbiBteUFnZWFuZHJldGlyZW1lbnQoeWVhcnMpe1xuLy8gICAgIGxldCBub3cgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XG4vLyAgICAgbGV0IGFnZSA9IG5vdyAtIHllYXJzO1xuLy8gICAgIHJldHVybiBbYWdlLCA5MCAtIGFnZSBdOyBcbi8vIH1cbi8vIGNvbnN0IFsgYWdlLCByZXRpcmVtZW50IF0gPSBteUFnZWFuZHJldGlyZW1lbnQoMTk3OCk7XG5cbi8vIGNvbnNvbGUubG9nKGBNeSBhZ2UgaXMgJHthZ2V9IGFuZCBpIGhhdmUgJHtyZXRpcmVtZW50fSB5ZWFycyB0byByZXRpcmUuYCk7XG5cblxuLy8gPj4+Pj4+PiBbICsgXSBbICsgXSBbICsgXSBbICsgXSAtIE5vZGUgTGlzdCB0byBhcnJheSBFUzVcbi8vIGNvbnN0IGxpbmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnAtMycpO1xuLy8gY29uc3QgbGluZXNBcnIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChsaW5lcyk7XG4vLyBjb25zb2xlLmxvZyhsaW5lc0Fycik7XG4vLyBsaW5lc0Fyci5mb3JFYWNoKGN1cnI9Pntcbi8vICAgICBjdXJyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZWQnO1xuLy8gfSk7XG5cblxuLy8gPj4+Pj4+PiBbICsgXSBbICsgXSBbICsgXSBbICsgXSAtIE5vZGUgTGlzdCB0byBhcnJheSBFUzZcbi8vIGNvbnN0IGxpbmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnAtMycpO1xuLy8gQXJyYXkuZnJvbShsaW5lcykuZm9yRWFjaChjdXJyPT57XG4vLyAgICAgY3Vyci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnYmx1ZSc7XG4vLyAgICAgY3Vyci5zdHlsZS5jb2xvciA9ICd3aGl0ZSc7XG4vLyB9KTtcblxuXG4vLyA+Pj4gPj4+IFsgKyBdIFsgKyBdIFsgKyBdIFsgKyBdIC0gTm9kZSBMaXN0IHRvIGFycmF5IEVTNSAtIENvbnRpbnVlIEJyZWFrXG4vLyBjb25zdCBsaW5lcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wLTMnKTtcbi8vIGNvbnN0IGxpbmVzQXJyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobGluZXMpO1xuLy8gZm9yKGxldCBpPTA7aTxsaW5lc0Fyci5sZW5ndGg7aSsrKXtcbi8vICAgICBpZihsaW5lc0FycltpXS5jbGFzc05hbWUgPT09ICdibHVlLWJsb3gnKXtcbi8vICAgICAgICAgbGluZXNBcnJbaV0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JlZCc7XG4vLyAgICAgICAgIGJyZWFrO1xuLy8gICAgIH1cbi8vICAgICBsaW5lc0FycltpXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmVkJztcbi8vICAgICBsaW5lc0FycltpXS50ZXh0Q29udGVudCA9ICdDZWx0YXMnO1xuLy8gfVxuXG5cbi8vID4+PiA+Pj4gWyArIF0gWyArIF0gWyArIF0gWyArIF0gLSBOb2RlIExpc3QgdG8gYXJyYXkgRVM2IC0gQ29udGludWUgQnJlYWtcbmNvbnN0IGxpbmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnAtMycpO1xuY29uc3QgbGluZXNBcnIgPSBBcnJheS5mcm9tKGxpbmVzKTtcbmZvcihjb25zdCBjdXJyIG9mIGxpbmVzQXJyKXtcbiAgICBpZihjdXJyW2ldLmNsYXNzTmFtZSA9PT0gJ2JsdWUtYmxveCcpe1xuICAgICAgICBsaW5lc0FycltpXS50ZXh0Q29udGVudCA9ICdDZWx0YXMnO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgbGluZXNBcnJbaV0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JlZCc7XG4gICAgbGluZXNBcnJbaV0udGV4dENvbnRlbnQgPSAnQ2VsdGFzJztcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
