"use strict";var _createClass=function(){function r(e,a){for(var n=0;n<a.length;n++){var r=a[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,a,n){return a&&r(e.prototype,a),n&&r(e,n),e}}();function _classCallCheck(e,a){if(!(e instanceof a))throw new TypeError("Cannot call a class as a function")}var Person=function(){function r(e,a,n){_classCallCheck(this,r),this.name=e,this.yeasrOfBirth=a,this.cityOfBirth=n}return _createClass(r,[{key:"calcaAge",value:function(){return(new Date).getFullYear()-this.yeasrOfBirth}}],[{key:"lembrance",value:function(){console.log("This is the prototype")}}]),r}(),maria=new Person("Maria Clorde",1986,"Michigan");console.log(maria),console.log(maria.calcaAge()),Person.lembrance();
//# sourceMappingURL=data:application/json;base64,
